# _*_ coding:utf-8 _*_

import sys
import os
import shutil
from time import sleep

packdict = '''
{
     "providers": [
         {
             "type": "ttf",
             "file": "minecraft:!FONTFILE",
 			"shift": [!SHIFT1, !SHIFT2],
 			"size": !SIZE,
 			"oversample": !OVERSAMPLE
         }
 	]
}
'''

packmeta = '''
{
  "pack": {
    "pack_format": 4,
    "description":"generated by minecraft font resourcepack generator"
  }
}
'''

def createpack(fontpath):
  global packdict
  packdict = packdict.replace('!FONTFILE', fontpath.split('\\')[-1])
  
  #get pack data
  print('input resource pack name, default test/输入材质包名字, 不输入默认为test: ', end='')
  packname = input()
  if packname == '':
    packname = 'test'
  print('input vertical shift, default 0/输入横向偏移量, 不输入默认为0: ', end='')
  i = input()
  if i == '':
    i = '0'
  packdict = packdict.replace('!SHIFT1', i)
  print('input horizonal shift, default 0/输入竖向偏移量, 不输入默认为0: ', end='')
  i = input()
  if i == '':
    i = '0'
  packdict = packdict.replace('!SHIFT2', i)
  print('input size, default 11/输入横向偏移量, 不输入默认为11: ', end='')
  i = input()
  if i == '':
    i = '11'
  packdict = packdict.replace('!SIZE', i)
  print('input oversample, default 2/输入横向偏移量, 不输入默认为0: ', end='')
  i = input()
  if i == '':
    i = '2'
  packdict = packdict.replace('!OVERSAMPLE', i)

  #start assemble pack
  try:
    os.makedirs('./generated/' + packname + '/assets/minecraft/font')
  except:
    print('pack exists!overwriting.../资源包已存在，覆盖中...')
  with open('./generated/' + packname + '/pack.mcmeta','w') as handle:
    handle.write(packmeta) #write mcmeta file
  with open('./generated/' + packname + '/assets/minecraft/font/default.json','w') as handle:
    handle.write(packdict) #write default.json
  shutil.copyfile(fontpath, './generated/' + packname + '/assets/minecraft/font/' + fontpath.split('\\')[-1])
  
  #finish message
  print('resource pack created at /generated/' + packname,',exiting after 3 seconds')
  print('资源包已创建在/generated/' + packname, ',3秒后退出')
  sleep(3)

if __name__ == "__main__":
  foundfile = 0

  #drag file
  if len(sys.argv) >= 2:
    try:
      handle = open(sys.argv[1])
      handle.close()
      createpack(sys.argv[1])
      foundfile = 1
    except:
      print('can not open ttf file/字体文件无法打开')
      foundfile = 1
      os._exit(0)

  #not dragging file
  else:
    print('ttf file not defined, searching this directory/字体文件没有设置, 搜索当前文件夹')
    filelist = os.listdir('./')
    for filename in filelist:
      if filename.endswith('.ttf'):
        print('found file/找到字体文件:' + filename)
        createpack(filename)
        foundfile = 1
  
  #no file notification
  if foundfile != 1:
    print('no file found...please drag a file to exe or place a file in this directory')
    print('没有找到文件...请拖放一个ttf字体在exe上或者放一个字体文件在这个文件夹')
    sleep(3)
    os._exit(0)